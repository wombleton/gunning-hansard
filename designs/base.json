{
    "lib": {
        "index": "exports.views = require('./views');\n",
        "views": "exports.pages = {\n    map: function(doc) {\n        if (doc['type'] === 'page') {\n            emit(doc.href, null);\n        }\n    }\n};\n\nexports.unscraped_pages = {\n    map: function(doc) {\n        if (doc['type'] === 'page' && doc.scraped !== true) {\n            emit(doc.href, null);\n        }\n    }\n};\n\nexports.rated_questions = {\n    map: function(doc) {\n        if (doc['type'] === 'question' && doc.rated === true) {\n            emit(doc._id, null);\n        }\n    }\n}\n\nexports.unrated_questions = {\n    map: function(doc) {\n        if (doc['type'] === 'question' && doc.rated !== true) {\n            emit(doc._id, null);\n        }\n    }\n}\n\nexports.blocks = {\n    map: function(doc) {\n        var key;\n        if (doc.type === 'block') {\n            key = [].concat(doc.date);\n            key.reverse();\n            key.unshift(doc.subject);\n            key.unshift(doc.speaker.toUpperCase());\n            emit(key, null);\n        }\n    }\n}\n\nexports.senti_blocks = {\n    map: function(doc) {\n        if (doc.type === 'block' && doc.sentiment) {\n            emit(doc._id, null);\n        }\n    }\n}\n\nexports.unsenti_blocks = {\n    map: function(doc) {\n        if (doc.type === 'block' && !doc.sentiment) {\n            emit(doc._id, null);\n        }\n    }\n}\n"
    },
    "views": {
        "pages": {
            "map": "function (doc) {\n        if (doc['type'] === 'page') {\n            emit(doc.href, null);\n        }\n    }"
        },
        "unscraped_pages": {
            "map": "function (doc) {\n        if (doc['type'] === 'page' && doc.scraped !== true) {\n            emit(doc.href, null);\n        }\n    }"
        },
        "rated_questions": {
            "map": "function (doc) {\n        if (doc['type'] === 'question' && doc.rated === true) {\n            emit(doc._id, null);\n        }\n    }"
        },
        "unrated_questions": {
            "map": "function (doc) {\n        if (doc['type'] === 'question' && doc.rated !== true) {\n            emit(doc._id, null);\n        }\n    }"
        },
        "blocks": {
            "map": "function (doc) {\n        var key;\n        if (doc.type === 'block') {\n            key = [].concat(doc.date);\n            key.reverse();\n            key.unshift(doc.subject);\n            key.unshift(doc.speaker.toUpperCase());\n            emit(key, null);\n        }\n    }"
        },
        "senti_blocks": {
            "map": "function (doc) {\n        if (doc.type === 'block' && doc.sentiment) {\n            emit(doc._id, null);\n        }\n    }"
        },
        "unsenti_blocks": {
            "map": "function (doc) {\n        if (doc.type === 'block' && !doc.sentiment) {\n            emit(doc._id, null);\n        }\n    }"
        }
    },
    "rewrites": [],
    "_attachments": {
        "modules.js": {
            "content_type": "application/json; charset=utf-8",
            "data": "LypnbG9iYWwgd2luZG93OiBmYWxzZSwgJDogZmFsc2UsIHBhZ2VUcmFja2VyOiBmYWxzZSwga2Fuc286IHRydWUgKi8KCi8qKgogKiBDb2RlIHJlcXVpcmVkIHRvIGJvb3RzdHJhcCB0aGUgYnJvd3NlciBDb21tb25KUyBlbnZpcm9ubWVudC4KICovCgooZnVuY3Rpb24gKGV4cG9ydHMpIHsKCiAgICBleHBvcnRzLm1vZHVsZUNhY2hlID0ge307CgogICAgZXhwb3J0cy5ub3JtYWxpemVQYXRoID0gZnVuY3Rpb24gKHApIHsKICAgICAgICB2YXIgcGF0aCA9IFtdOwogICAgICAgIHZhciBwYXJ0cyA9IHAuc3BsaXQoJy8nKTsKICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBhcnRzLmxlbmd0aDsgaSArPSAxKSB7CiAgICAgICAgICAgIGlmIChwYXJ0c1tpXSA9PT0gJy4uJykgewogICAgICAgICAgICAgICAgcGF0aC5wb3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIGlmIChwYXJ0c1tpXSAhPT0gJy4nKSB7CiAgICAgICAgICAgICAgICBwYXRoLnB1c2gocGFydHNbaV0pOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHJldHVybiBwYXRoLmpvaW4oJy8nKTsKICAgIH07CgogICAgZXhwb3J0cy5kaXJuYW1lID0gZnVuY3Rpb24gKHApIHsKICAgICAgICBpZiAocCA9PT0gJy8nKSB7CiAgICAgICAgICAgIHJldHVybiBwOwogICAgICAgIH0KICAgICAgICB2YXIgcGFydHMgPSBwLnNwbGl0KCcvJyk7CiAgICAgICAgcGFydHMucG9wKCk7CiAgICAgICAgaWYgKHBhcnRzLmxlbmd0aCA9PT0gMSAmJiBwYXJ0c1swXSA9PT0gJycpIHsKICAgICAgICAgICAgcmV0dXJuICcvJzsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHBhcnRzLmpvaW4oJy8nKTsKICAgIH07CgogICAgZXhwb3J0cy5jcmVhdGVSZXF1aXJlID0gZnVuY3Rpb24gKGN1cnJlbnQpIHsKICAgICAgICByZXR1cm4gZnVuY3Rpb24gKHRhcmdldCkgewogICAgICAgICAgICB2YXIgcGF0aDsKICAgICAgICAgICAgaWYgKHRhcmdldC5jaGFyQXQoMCkgPT09ICcuJykgewogICAgICAgICAgICAgICAgdmFyIGRpciA9IGV4cG9ydHMuZGlybmFtZShjdXJyZW50KTsKICAgICAgICAgICAgICAgIHBhdGggPSBleHBvcnRzLm5vcm1hbGl6ZVBhdGgoZGlyICsgJy8nICsgdGFyZ2V0KTsKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgIHBhdGggPSBleHBvcnRzLm5vcm1hbGl6ZVBhdGgodGFyZ2V0KTsKICAgICAgICAgICAgfQogICAgICAgICAgICB2YXIgbSA9IGthbnNvLm1vZHVsZUNhY2hlW3BhdGhdOwogICAgICAgICAgICBpZiAoIW0pIHsKICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTm8gc3VjaCBtb2R1bGU6ICcgKyBwYXRoKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoIW0ubG9hZGVkKSB7CiAgICAgICAgICAgICAgICBtLmV4cG9ydHMgPSB7fTsKICAgICAgICAgICAgICAgIG0uaWQgPSBwYXRoOwogICAgICAgICAgICAgICAgLy8gVE9ETzogcHJvcGVydHkgbm90IHByb3ZpZGVkIGJ5IGNvdWNoZGIsIGJ1dCBpcyBieSBub2RlOgogICAgICAgICAgICAgICAgLy9tLnJlcXVpcmUgPSBleHBvcnRzLmNyZWF0ZVJlcXVpcmUocGF0aCk7CiAgICAgICAgICAgICAgICAvLyBUT0RPOiBwcm9wZXJ0eSBub3QgcHJvdmlkZWQgYnkgY291Y2hkYiwgYnV0IGlzIGJ5IG5vZGU6CiAgICAgICAgICAgICAgICAvL20uZmlsZW5hbWUgPSAnJzsKICAgICAgICAgICAgICAgIC8vIFRPRE86IG1vZHVsZSBwcm9wZXJ0aWVzIHByb3ZpZGVkIGJ5IGNvdWNoZGIsIGJ1dCBub3QgYnkga2Fuc28KICAgICAgICAgICAgICAgIC8vICogY3VycmVudAogICAgICAgICAgICAgICAgLy8gKiBwYXJlbnQKICAgICAgICAgICAgICAgIC8vIHNldCB0aGlzIHRvIHRydWUgKmJlZm9yZSogY2FsbGluZyBtLmxvYWQgc28gY2lyY3VsYXIKICAgICAgICAgICAgICAgIC8vIHJlcXVpcmVzIGRvbid0IGJsb3cgdGhlIGNhbGwgc3RhY2sKICAgICAgICAgICAgICAgIG0ubG9hZGVkID0gdHJ1ZTsKICAgICAgICAgICAgICAgIC8vbS5sb2FkKG0sIG0uZXhwb3J0cywgbS5yZXF1aXJlKTsKICAgICAgICAgICAgICAgIG0ubG9hZChtLCBtLmV4cG9ydHMsIGV4cG9ydHMuY3JlYXRlUmVxdWlyZShwYXRoKSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIG0uZXhwb3J0czsKICAgICAgICB9OwogICAgfTsKCiAgICBpZiAodHlwZW9mIHJlcXVpcmUgPT09ICd1bmRlZmluZWQnKSB7CiAgICAgICAgLy8gbWFrZSByZXF1aXJlIGF2YWlsYWJsZSBnbG9iYWxseSwgdW5sZXNzIGFscmVhZHkgaW4gYSBjb21tb25qcwogICAgICAgIC8vIGVudmlyb25tZW50CiAgICAgICAgdGhpcy5yZXF1aXJlID0gZXhwb3J0cy5jcmVhdGVSZXF1aXJlKCcnKTsKICAgIH0KCn0oKHR5cGVvZiBleHBvcnRzID09PSAndW5kZWZpbmVkJykgPyB0aGlzLmthbnNvID0ge306IG1vZHVsZS5leHBvcnRzKSk7CgoKLyoqCiAqIENvbW1vbkpTIG1vZHVsZXMgYXJlIHdyYXBwZWQgYW5kIGFwcGVuZGVkIHRvIHRoaXMgZmlsZS4KICovCi8qKioqKioqKioqIGxpYi9pbmRleCAqKioqKioqKioqLwoKa2Fuc28ubW9kdWxlQ2FjaGVbImxpYi9pbmRleCJdID0ge2xvYWQ6IChmdW5jdGlvbiAobW9kdWxlLCBleHBvcnRzLCByZXF1aXJlKSB7CgpleHBvcnRzLnZpZXdzID0gcmVxdWlyZSgnLi92aWV3cycpOwoKCn0pfTsKCi8qKioqKioqKioqIGxpYi92aWV3cyAqKioqKioqKioqLwoKa2Fuc28ubW9kdWxlQ2FjaGVbImxpYi92aWV3cyJdID0ge2xvYWQ6IChmdW5jdGlvbiAobW9kdWxlLCBleHBvcnRzLCByZXF1aXJlKSB7CgpleHBvcnRzLnBhZ2VzID0gewogICAgbWFwOiBmdW5jdGlvbihkb2MpIHsKICAgICAgICBpZiAoZG9jWyd0eXBlJ10gPT09ICdwYWdlJykgewogICAgICAgICAgICBlbWl0KGRvYy5ocmVmLCBudWxsKTsKICAgICAgICB9CiAgICB9Cn07CgpleHBvcnRzLnVuc2NyYXBlZF9wYWdlcyA9IHsKICAgIG1hcDogZnVuY3Rpb24oZG9jKSB7CiAgICAgICAgaWYgKGRvY1sndHlwZSddID09PSAncGFnZScgJiYgZG9jLnNjcmFwZWQgIT09IHRydWUpIHsKICAgICAgICAgICAgZW1pdChkb2MuaHJlZiwgbnVsbCk7CiAgICAgICAgfQogICAgfQp9OwoKZXhwb3J0cy5yYXRlZF9xdWVzdGlvbnMgPSB7CiAgICBtYXA6IGZ1bmN0aW9uKGRvYykgewogICAgICAgIGlmIChkb2NbJ3R5cGUnXSA9PT0gJ3F1ZXN0aW9uJyAmJiBkb2MucmF0ZWQgPT09IHRydWUpIHsKICAgICAgICAgICAgZW1pdChkb2MuX2lkLCBudWxsKTsKICAgICAgICB9CiAgICB9Cn0KCmV4cG9ydHMudW5yYXRlZF9xdWVzdGlvbnMgPSB7CiAgICBtYXA6IGZ1bmN0aW9uKGRvYykgewogICAgICAgIGlmIChkb2NbJ3R5cGUnXSA9PT0gJ3F1ZXN0aW9uJyAmJiBkb2MucmF0ZWQgIT09IHRydWUpIHsKICAgICAgICAgICAgZW1pdChkb2MuX2lkLCBudWxsKTsKICAgICAgICB9CiAgICB9Cn0KCmV4cG9ydHMuYmxvY2tzID0gewogICAgbWFwOiBmdW5jdGlvbihkb2MpIHsKICAgICAgICB2YXIga2V5OwogICAgICAgIGlmIChkb2MudHlwZSA9PT0gJ2Jsb2NrJykgewogICAgICAgICAgICBrZXkgPSBbXS5jb25jYXQoZG9jLmRhdGUpOwogICAgICAgICAgICBrZXkucmV2ZXJzZSgpOwogICAgICAgICAgICBrZXkudW5zaGlmdChkb2Muc3ViamVjdCk7CiAgICAgICAgICAgIGtleS51bnNoaWZ0KGRvYy5zcGVha2VyLnRvVXBwZXJDYXNlKCkpOwogICAgICAgICAgICBlbWl0KGtleSwgbnVsbCk7CiAgICAgICAgfQogICAgfQp9CgpleHBvcnRzLnNlbnRpX2Jsb2NrcyA9IHsKICAgIG1hcDogZnVuY3Rpb24oZG9jKSB7CiAgICAgICAgaWYgKGRvYy50eXBlID09PSAnYmxvY2snICYmIGRvYy5zZW50aW1lbnQpIHsKICAgICAgICAgICAgZW1pdChkb2MuX2lkLCBudWxsKTsKICAgICAgICB9CiAgICB9Cn0KCmV4cG9ydHMudW5zZW50aV9ibG9ja3MgPSB7CiAgICBtYXA6IGZ1bmN0aW9uKGRvYykgewogICAgICAgIGlmIChkb2MudHlwZSA9PT0gJ2Jsb2NrJyAmJiAhZG9jLnNlbnRpbWVudCkgewogICAgICAgICAgICBlbWl0KGRvYy5faWQsIG51bGwpOwogICAgICAgIH0KICAgIH0KfQoKCn0pfTsKCg=="
        }
    },
    "kanso": {
        "config": {
            "name": "gunning-hansard",
            "version": "0.0.1",
            "description": "Gunning Hansard",
            "modules": [
                "lib"
            ],
            "load": "lib/index",
            "dependencies": {
                "modules": null,
                "properties": null
            },
            "minify": false
        },
        "build_time": "2012-11-18T08:23:36Z",
        "kanso_version": "0.2.2"
    }
}
